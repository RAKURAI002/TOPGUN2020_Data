const tf = require('@tensorflow/tfjs-node');
const neatCsv = require('neat-csv');
const fs = require('fs')
const keras = require('keras')
var OneHot = require('one-hot');

const model = tf.sequential();
model.add(tf.layers.dense({units: 4, activation: 'sigmoid', batchInputShape: [4, 4] }));
model.add(tf.layers.dense({activation: 'sigmoid', units: 4 }));
model.add(tf.layers.dense({activation: 'softmax', units: 4 }));
model.compile({ loss: 'categoricalCrossentropy', optimizer: 'sgd'});


main = async() =>
{
/*
  const ys = tf.tensor2d([1, 2, 3, 4], [4, 1]);
  ys.print();*/
var ys ;
ys = tf.oneHot(tf.tensor1d([1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3
  ,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], 'int32'), 4);
const xs = tf.tensor([
  [-62.0,-71.0,-82.0,-93.0],
  [-64.0,-72.0,-83.0,-94.0],
  [-64.0,-70.0,-83.0,-94.0],
  [-62.0,-74.0,-81.0,-970.],
  [-62.0,-74.0,-81.0,-970.],
  [-64.0,-71.0,-81.0,-940.],
  [-61.0,-74.0,-81.0,-95.0],
  [-64.0,-70.0,-83.0,-96.0],
  [-61.0,-71.0,-81.0,-91.0],
  [-62.0,-74.0,-82.0,-92.0],
  [-61.0,-73.0,-83.0,-91.0],
  [-64.0,-71.0,-82.0,-90.0],
  [-61.0,-73.0,-84.0,-97.0],
  [-64.0,-70.0,-84.0,-97.0],
  [-62.0,-71.0,-82.0,-97.0],
  [-60.0,-73.0,-80.0,-97.0],
  [-61.0,-71.0,-81.0,-96.0],
  [-61.0,-73.0,-81.0,-92.0],
  [-62.0,-70.0,-82.0,-91.0],
  [-62.0,-71.0,-80.0,-97.0],
  [-64.0,-71.0,-81.0,-96.0],
  [-62.0,-70.0,-84.0,-96.0],
  [-64.0,-70.0,-83.0,-91.0],
  [-60.0,-73.0,-83.0,-91.0],
  [-60.0,-73.0,-82.0,-97.0],
  [-62.0,-71.0,-81.0,-92.0],
  [-66.0,-81.0,-83.0,-91.0],
  [-64.0,-80.0,-84.0,-90.0],
  [-65.0,-80.0,-82.0,-91.0],
  [-64.0,-82.0,-83.0,-88.0],
  [-64.0,-82.0,-84.0,-92.0],
  [-65.0,-78.0,-82.0,-89.0],
  [-63.0,-79.0,-82.0,-90.0],
  [-64.0,-81.0,-85.0,-92.0],
  [-64.0,-79.0,-85.0,-92.0],
  [-66.0,-82.0,-84.0,-89.0],
  [-63.0,-80.0,-85.0,-89.0],
  [-65.0,-80.0,-84.0,-91.0],
  [-67.0,-80.0,-84.0,-88.0],
  [-67.0,-78.0,-84.0,-92.0],
  [-62.0,-79.0,-85.0,-90.0],
  [-62.0,-78.0,-83.0,-90.0],
  [-64.0,-78.0,-85.0,-88.0],
  [-62.0,-81.0,-82.0,-92.0],
  [-65.0,-82.0,-82.0,-91.0],
  [-66.0,-82.0,-82.0,-92.0],
  [-66.0,-80.0,-84.0,-90.0],
  [-66.0,-79.0,-85.0,-92.0],
  [-66.0,-78.0,-84.0,-89.0],
  [-66.0,-81.0,-83.0,-92.0],
  [-67.0,-80.0,-84.0,-89.0],
  [-66.0,-75.0,-83.0,-93.0],
  [-66.0,-77.0,-83.0,-90.0],
  [-69.0,-79.0,-83.0,-92.0],
  [-67.0,-80.0,-82.0,-93.0],
  [-70.0,-75.0,-82.0,-91.0],
  [-71.0,-80.0,-83.0,-89.0],
  [-68.0,-76.0,-82.0,-90.0],
  [-65.0,-80.0,-82.0,-90.0],
  [-65.0,-75.0,-83.0,-91.0],
  [-68.0,-75.0,-82.0,-91.0],
  [-70.0,-80.0,-82.0,-92.0],
  [-66.0,-77.0,-83.0,-93.0],
  [-66.0,-75.0,-82.0,-90.0],
  [-69.0,-79.0,-83.0,-92.0],
  [-71.0,-79.0,-82.0,-89.0],
  [-67.0,-77.0,-83.0,-90.0],
  [-69.0,-77.0,-82.0,-93.0],
  [-71.0,-79.0,-83.0,-93.0],
  [-70.0,-78.0,-83.0,-90.0],
  [-69.0,-75.0,-82.0,-91.0],
  [-68.0,-76.0,-83.0,-90.0],
  [-68.0,-79.0,-82.0,-92.0],
  [-70.0,-79.0,-82.0,-89.0],
  [-66.0,-76.0,-82.0,-89.0],
  [-65.0,-78.0,-83.0,-90.0],
  [-58.0,-76.0,-79.0,-85.0],
  [-59.0,-73.0,-78.0,-87.0],
  [-57.0,-74.0,-78.0,-85.0],
  [-58.0,-73.0,-78.0,-86.0],
  [-56.0,-75.0,-78.0,-87.0],
  [-55.0,-73.0,-78.0,-87.0],
  [-59.0,-76.0,-78.0,-86.0],
  [-60.0,-76.0,-78.0,-86.0],
  [-58.0,-73.0,-79.0,-85.0],
  [-59.0,-74.0,-79.0,-85.0],
  [-58.0,-74.0,-79.0,-86.0],
  [-56.0,-75.0,-78.0,-86.0],
  [-60.0,-75.0,-79.0,-87.0],
  [-58.0,-74.0,-78.0,-86.0],
  [-55.0,-74.0,-79.0,-85.0],
  [-57.0,-73.0,-78.0,-87.0],
  [-57.0,-75.0,-79.0,-86.0],
  [-56.0,-75.0,-79.0,-85.0],
  [-55.0,-74.0,-79.0,-87.0],
  [-59.0,-74.0,-78.0,-85.0],
  [-56.0,-76.0,-79.0,-87.0],
  [-60.0,-73.0,-78.0,-86.0],
  [-60.0,-75.0,-79.0,-87.0],
  [-56.0,-73.0,-78.0,-86.0]]);
  xs.print();
  ys.print();

  

const fit = async () => {
    await model.fit(xs, ys, {
        epochs: 20,        
        callbacks: {
            onEpochEnd: (epoch, log) => {
                console.log(`Epoch ${epoch}: loss = ${log.loss}`)
            }
        }
    });
  }
  await fit();



save = async function () { await model.save('file:///tmp/The Last model 2');};
await save();
var res;
res = async() => { 
    console.log("PPPPPPPPPPPPPP");
    r = await model.predict(tf.tensor([
      [-60.0,-75.0,-79.0,null]]));
    
    console.log(typeof(r));
    r.print();

    top = tf.argmax(r, 1);
    console.log(r);
    
    correct_prediction = tf.argmax(y,1);
    console.log(correct_prediction);
    
      

    var v = r.dataSync();
   

   
    console.log('v');
    r.print();

  }
  
  await res();
  
  console.log("PPPPPPPPPPPPPP");

  function indexOfMax(arr) {
    if (arr.length === 0) {
        return -1;
    }

    var max = arr[0];
    var maxIndex = 0;

    for (var i = 0; i < arr.length; i++) {
        if (arr[1,i] > max) {
            maxIndex = 0;
            max = arr[1,i];
        }
    }
    return maxIndex;
}
console.log(indexOfMax(r))

    }
    main();
    
//setTimeout( console.log(res), 2000); 


